// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"github.com/jinsoft/ainiok/app/user/cmd/rpc/pb"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	IdReq       = pb.IdReq
	LoginReq    = pb.LoginReq
	RegisterReq = pb.RegisterReq
	InfoReply   = pb.UserInfoReply

	User interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*InfoReply, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*InfoReply, error)
		GetUser(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*InfoReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*InfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*InfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) GetUser(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*InfoReply, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}
